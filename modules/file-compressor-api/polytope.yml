tools:
  file-compressor-api:
    info: "'Base' module for other modules in this file to build on."
    params:
      - id: cmd
        info: The command to run
        type: [default, str, ./bin/run]
      - id: dev-mode
        info: Whether to run in dev mode (with hot reload, debugging)
        type: [default, bool, true]
      - id: port
        info: The port the API will run on
        type: [default, int, 3030]
      - id: restart-policy
        info: Restart policy for the container.
        type: [default, [enum, always, on-failure], always]
      - id: id
        info: The container ID to use.
        type: [default, str, file-compressor-api]
      - id: create
        info: Whether to create the container.
        type: [default, [enum, never, always, when-missing], when-missing]
    run:
      - tool: polytope/python
        args:
          id: pt.param id
          image: astral/uv:python3.13-bookworm-slim
          code: { type: repo, path: . }
          cmd: pt.param cmd
          restart:
            policy: pt.param restart-policy
          services: |-
            #pt-js
            params.cmd === "./bin/run"
              ? [{ id: "file-compressor-api", ports: [{ protocol: "http", port: params.port, 'expose-as': params.port }] }]
              : null;
          env:
            - { name: HTTP_EXPOSE_ERRORS, value: pt.param dev-mode }
            - { name: HTTP_AUTORELOAD, value: pt.param dev-mode }
            - { name: HTTP_PORT, value: pt.param port }
            - { name: LOG_LEVEL, value: INFO }

            - { name: POSTGRES_HOST, value: postgres }

            - { name: TEMPORAL_HOST, value: temporal }
            - { name: TEMPORAL_PORT, value: 7233 }
            - { name: TEMPORAL_NAMESPACE, value: default }
            - { name: TEMPORAL_TASK_QUEUE, value: main-task-queue }
          mounts:
            - { path: /root/.cache/, source: { type: volume, scope: project, id: file-compressor-api-dependency-cache } }
  file-compressor-api-add:
    info: Adds one or more packages to the pyproject.toml file.
    params:
      - id: packages
        info: comma/whitespace-separated list of python packages to add to pyproject.toml
        type: str
    run:
      - tool: file-compressor-api
        args:
          id: file-compressor-api-add
          restart-policy: on-failure
          cmd: '#pt-js "uv add --no-progress " + params.packages.replace(/[\s,]+/g, " ")'
          create: always
  file-compressor-api-validate:
    info: Run development validation checks to catch common issues before deployment.
    run:
      - tool: file-compressor-api
        args:
          id: file-compressor-api-validate
          restart-policy: never
          cmd: ./bin/validate
          create: always
